name: Deploy Docker Image to Server
on:
  workflow_run:
    # This GitHub Action depends on another, which package up docker and pushes it to a  docker repo
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    # If the docker build went ok and the image was pushed to the docker repo, then deploy it to the server
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Deploy to Linux server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            REG="docker.io"
            IMAGE="${REG}/${{ secrets.DOCKER_USERNAME }}/mleng_sayhi:latest"
            APP_NAME="${{ secrets.DOCKER_USERNAME }}_mleng_sayhi"

            # Ensure host mount exists
            sudo mkdir -p /opt/assignment_outputs

            echo "Login & pull…"
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull "${IMAGE}"
            docker image inspect "${IMAGE}" --format 'Cmd={{.Config.Cmd}}'

            echo "Recreate container…"
            docker rm -f "${APP_NAME}" || true

            # If your image CMD already runs uvicorn correctly, you can drop the last line override
            docker run -d --name "${APP_NAME}" \
              -v /opt/assignment_outputs:/app/data \
              "${IMAGE}" \
              python app.py

            echo "Containers now:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}\t{{.Command}}"



          # REG="docker.io"
          # echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin 
          # docker pull ${REG}/${{ secrets.DOCKER_USERNAME }}/mleng_sayhi:latest
          # docker stop ${{ secrets.DOCKER_USERNAME }}_mleng_sayhi || true
          # docker rm ${{ secrets.DOCKER_USERNAME }}_mleng_sayhi || true
          # docker run -d --name ${{ secrets.DOCKER_USERNAME }}_mleng_sayhi -v /opt/assignment_outputs:/app/data ${REG}/${{ secrets.DOCKER_USERNAME }}/mleng_sayhi:latest

# The final block "logs on" to the remote server
# - gets the latest docker image from the repository
# - stops the currently running container
# - runs the newly downloaded image
    # - notice that it runs it in '-d' or disconnected mode - so the container won't stop even if you log off
    # - also notice that -v host_dir:container_dir connects the directory /opt/assignment_outputs on the internet server to your docker container, where it will shwo up as /app/data
    #    - When you write to /app/data inside your docker image, it will actually be written to the shared directory
